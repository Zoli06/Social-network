scalar Date

# User things
input UserInput {
  firstName: String!
  lastName: String!
  middleName: String
  userName: String!
  mobileNumber: String
  email: String!
  intro: String
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  userId: ID!
  firstName: String!
  lastName: String!
  middleName: String
  userName: String!
  mobileNumber: String
  email: String!
  registratedAt: Date!
  lastLogin: Date!
  intro: String
  friends: [User!]!
  incomingFriendRequests: [User!]!
  outgoingFriendRequests: [User!]!
  blockedUsers: [User!]!
}

# Communication
enum NotificationFrequency {
  off
  low
  frequent
}

enum VoteType {
  up
  down
}

enum Visibility {
  visible,
  hidden
}

type Reaction {
  user: User!
  createdAt: Date!
  updatedAt: Date!
  type: Int!
}

type Vote {
  user: User!
  createdAt: Date!
  updatedAt: Date!
  type: VoteType!
}

type Media {
  mediaId: ID!
  createdAt: Date!
  updatedAt: Date!
  url: String!
  user: User!
}

type Detail {
  detail: String!
  value: String
  createdAt: Date!
  updatedAt: Date!
}

type Group {
  groupId: ID!
  createdByUser: User!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  messages: [Message!]!
  members: [User!]!
  memberRequests: [User!]!
  blockedUsers: [User!]!
  admins: [User!]!
  notificationFrequency: NotificationFrequency!
  details: [Detail!]!
  visibility: Visibility!
}

type Message {
  messageId: ID!
  groupId: ID!
  user: User!
  createdAt: Date!
  updatedAt: Date!
  text: String!
  responeToActivityId: ID
  reactions: [Reaction!]!
  votes: [Vote!]!
  mentionedUsers: [User!]!
  medias: [Media!]! # urls of the medias
}

# Query, Mutation, Subscription
type Query {
  user(userId: ID!): User
  me: User!
  group(groupId: ID): Group
  message(messageId: ID): Message
}

type Mutation {
  register(input: UserInput): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  updateUser(input: UserInput): User! # user only can update his/her own profile
}

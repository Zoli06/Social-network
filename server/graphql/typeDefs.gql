scalar Date

# User things
enum UserUserRelationshipType {
  friend
  incoming_friend_request
  outgoing_friend_request
  blocked
}

type UserUserRelationship {
  user: User!
  type: UserUserRelationshipType!
  createdAt: Date!
  updatedAt: Date!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  userId: ID!
  firstName: String!
  lastName: String!
  middleName: String
  userName: String!
  mobileNumber: String
  email: String!
  registratedAt: Date!
  lastLogin: Date!
  intro: String
  friends: [UserUserRelationship!]!
  incomingFriendRequests: [UserUserRelationship!]!
  outgoingFriendRequests: [UserUserRelationship!]!
  blockedUsers: [UserUserRelationship!]!
  userRelationships: [UserUserRelationship!]! # all relationships
  # TODO: profile picture
}

input UserInput {
  firstName: String!
  lastName: String!
  middleName: String
  userName: String!
  mobileNumber: String
  email: String!
  intro: String
  password: String!
}

# Communication
enum NotificationFrequency {
  off
  low
  frequent
}

enum VoteType {
  up
  down
}

enum Visibility {
  visible
  hidden
}

type Reaction {
  user: User!
  createdAt: Date!
  updatedAt: Date!
  type: Int!
}

type Vote {
  user: User!
  createdAt: Date!
  updatedAt: Date!
  type: VoteType!
}

type Media {
  mediaId: ID!
  createdAt: Date!
  updatedAt: Date!
  url: String!
  user: User!
  caption: String
}

input MediaInput {
  url: String!
  caption: String
}

type Group {
  groupId: ID!
  createdByUser: User!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  messages: [Message!]!
  members: [User!]!
  memberRequests: [User!]!
  bannedUsers: [User!]!
  invitedUsers: [User!]!
  admins: [User!]!
  notificationFrequency: NotificationFrequency!
  description: String
  visibility: Visibility!
}

input GroupInput {
  name: String!
  description: String
  visibility: Visibility!
}

type Message {
  messageId: ID!
  group: Group!
  user: User!
  createdAt: Date!
  updatedAt: Date!
  text: String!
  responseToMessage: Message
  reactions: [Reaction!]!
  reaction: Reaction
  upVotes: Int!
  downVotes: Int!
  vote: Vote
  mentionedUsers: [User!]!
  medias: [Media!]! # urls of the medias
}

input MessageInput {
  text: String!
  responseToMessageId: ID
  mentionedUserIds: [ID!]
  mediaIds: [String!]
}

# Query, Mutation, Subscription
type Query {
  user(userId: ID!): User
  me: User
  group(groupId: ID): Group
  message(messageId: ID): Message
  reaction(messageId: ID!, userId: ID!): Reaction
  media(mediaId: ID!): Media
}

type Mutation {
  register(user: UserInput!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  updateUser(user: UserInput!): User # user only can update his/her own profile
  createGroup(group: GroupInput!): Group
  updateGroup(groupId: ID!, group: GroupInput!): Group
  deleteGroup(groupId: ID!): ID
  sendMessage(groupId: ID!, message: MessageInput!): Message
  editMessage(messageId: ID!, message: MessageInput!): Message
  deleteMessage(messageId: ID!): ID
  createReaction(messageId: ID!, type: Int): Reaction # also can be used to delete and update
  createVote(messageId: ID!, type: VoteType): VoteType # also can be used to delete and update
  createMedia(media: MediaInput!): Media # image will be uploaded to a cdn by the client, so we just need the url
  deleteMedia(mediaId: ID!): ID
}

scalar Date

type User {
  userId: ID!
  firstName: String!
  lastName: String!
  middleName: String
  userName: String!
  mobileNumber: String
  email: String!
  registratedAt: Date!
  lastLogin: Date!
  intro: String
  friends: [User]
}

input UserInput {
  firstName: String!
  lastName: String!
  middleName: String
  userName: String!
  mobileNumber: String
  email: String!
  intro: String
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Channel {
  channelId: ID!
  createdByUser: User!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  channelType: String!
  members: [User]!
  messages: [Message]!
}

type Message {
  messageId: ID!
  channelId: ID!
  userId: User!
  createdAt: Date!
  updatedAt: Date!
  text: String!
  responeToActivityId: ID
}

type Query {
  user(userId: ID!): User
  me: User
  channel(channelId: ID): Channel
  message(messageId: ID): Message
}

type Mutation {
  register(input: UserInput): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  updateUser(input: UserInput): User! # user only can update his/her own profile
}